import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import r2_score

# 1. Import data and data standardization
sample_data = pd.read_excel('C:\\Users\\Rahkar\\Downloads\\Documents\\jmse_37_Data_V3.xlsx')

# Check the column names
column_names = sample_data.columns
print("Column Names:", column_names)

# Assuming the correct column names for input features and target
X = sample_data[['Input1\n', 'Input2\n']].values
y = sample_data['EFF'].values

# Standardize input features
scaler_input = MinMaxScaler()
X = scaler_input.fit_transform(X)

# Standardize the output target
scaler_output = MinMaxScaler()
y = scaler_output.fit_transform(y.reshape(-1, 1))

# 2. Build, train, and simulate BPNN algorithm
hidden_layer_size = 10  # Replace with your desired number of neurons in the hidden layer
max_iterations = 1000
learning_rate = 0.01

bpnn = MLPRegressor(hidden_layer_sizes=(hidden_layer_size,), activation='logistic', solver='lbfgs',
                    max_iter=max_iterations, learning_rate_init=learning_rate)

bpnn.fit(X, y.ravel())

# Inverse normalization of data
def inverse_normalize(value, scaler):
    return scaler.inverse_transform(value.reshape(-1, 1))

# 3. Predict the EFF for new data
new_data = np.array([[1.5, 2.5]])  # Replace with your new data
new_data = scaler_input.transform(new_data)
predicted_eff = bpnn.predict(new_data)
predicted_eff = inverse_normalize(predicted_eff, scaler_output)

print("Predicted EFF for new data:", predicted_eff)

# 4. Predict the EFF for all test data
test_data = sample_data[['Input1\n', 'Input2\n']].values[-48:]  # Select the last 48 test data
test_data = scaler_input.transform(test_data)

predicted_eff_test = bpnn.predict(test_data)
predicted_eff_test = inverse_normalize(predicted_eff_test, scaler_output)

print("Predicted EFF for test data:", predicted_eff_test)


MAE Calculation:

from sklearn.metrics import mean_absolute_error

# Calculate MAE for test data
mae_test = mean_absolute_error(sample_data['EFF'].values[-48:], predicted_eff_test)
print("Mean Absolute Error (MAE) for test data:", mae_test)
